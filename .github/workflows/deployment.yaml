name: Deploy REMS CDK

on:
  push:
    branches:
      - '**'

permissions:
  id-token: write
  contents: read

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 20

      - name: Install dependencies
        run: npm ci

      - name: Build
        run: npm run build

  deploy-dev:
    if: github.ref == 'refs/heads/develop'
    runs-on: ubuntu-latest
    needs: test
    environment: development
    steps:
      - uses: actions/checkout@v3

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 20

      - name: Install dependencies
        run: npm ci

      - name: Configure AWS credentials (OIDC)
        uses: aws-actions/configure-aws-credentials@v2
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_ARN_DEV }}
          aws-region: ${{ secrets.CDK_REGION_DEV }}
      - name: Deploy to Dev
        run: npx cdk diff && npx cdk deploy --all --require-approval never --force
        env:
          DEPLOY_ENV: ${{ vars.DEPLOY_ENV }}
          REMS_TOKEN_ARN: ${{ secrets.REMS_TOKEN_ARN }}
          CDK_ACCOUNT_ID: ${{ secrets.CDK_ACCOUNT_ID_DEV }}
          CDK_REGION: ${{ secrets.CDK_REGION_DEV }}
          VPC_CIDR: ${{ secrets.VPC_CIDR_DEV }}
          PUBLIC_URL: ${{ secrets.PUBLIC_URL_DEV }}
          HOST_NAME: ${{ vars.HOST_NAME }}
          HOST_ZONE: ${{ vars.HOST_ZONE }}
          CERTIFICATE_ARN: ${{ secrets.CERTIFICATE_ARN_DEV }}
          CONTAINER_IMAGE: 232870232581.dkr.ecr.ap-southeast-2.amazonaws.com/rems:develop
          OWNER: ${{ vars.OWNER }}
          PROJECT: ${{ vars.PROJECT }}
          DB_NAME: rems
          DB_USER: rems
          POSTGRES_VERSION: 17.4
          DB_INSTANCE_SIZE: micro
          DB_INSTANCE_CLASS: burstable3
          OIDC_SECRET_ARN: ${{ secrets.OIDC_SECRET_ARN_DEV }}

  deploy-staging:
    if: github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    environment: staging
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-node@v3
        with:
          node-version: 20
      - run: npm ci

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_ARN_STAGING }}
          aws-region: ${{ secrets.CDK_REGION_STAGING }}

      - name: Deploy to Staging
        run: npx cdk deploy --all --require-approval never
        env:
          DEPLOY_ENV: ${{ vars.DEPLOY_ENV }}
          CDK_ACCOUNT_ID: ${{ secrets.CDK_ACCOUNT_ID_STAGING }}
          CDK_REGION: ${{ secrets.CDK_REGION_STAGING }}
          VPC_CIDR: ${{ secrets.VPC_CIDR_STAGING }}
          PUBLIC_URL: ${{ secrets.PUBLIC_URL_STAGING }}
          HOST_NAME: ${{ vars.HOST_NAME }}
          HOST_ZONE: ${{ vars.HOST_ZONE }}
          CERTIFICATE_ARN: ${{ secrets.CERTIFICATE_ARN_STAGING }}
          CONTAINER_IMAGE: ${{ vars.CONTAINER_IMAGE_STAGING }}
          OWNER: ${{ vars.OWNER }}
          PROJECT: ${{ vars.PROJECT }}
          DB_NAME: rems
          DB_USER: rems
          POSTGRES_VERSION: 17.4
          DB_INSTANCE_SIZE: micro
          DB_INSTANCE_CLASS: burstable3
          OIDC_SECRET_ARN: ${{ secrets.OIDC_SECRET_ARN_STAGING }}

  deploy-prod:
    if: github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    needs: deploy-staging
    environment: production
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-node@v3
        with:
          node-version: 20
      - run: npm ci

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_ARN_PROD }}
          aws-region: ${{ secrets.CDK_REGION_PROD }}

      - name: Deploy to Prod
        run: npx cdk deploy --all --require-approval never
        env:
          DEPLOY_ENV: ${{ vars.DEPLOY_ENV }}
          AMP_WORKSPACE_ID: ${{ vars.AMP_WORKSPACE_ID }}
          MONITORING_ACCOUNT_ID: ${{ vars.MONITORING_ACCOUNT_ID }}
          CDK_ACCOUNT_ID: ${{ secrets.CDK_ACCOUNT_ID_PROD }}
          CDK_REGION: ${{ secrets.CDK_REGION_PROD }}
          VPC_CIDR: ${{ secrets.VPC_CIDR_PROD }}
          PUBLIC_URL: ${{ secrets.PUBLIC_URL }}
          HOST_NAME: ${{ vars.HOST_NAME }}
          HOST_ZONE: ${{ vars.HOST_ZONE }}
          CERTIFICATE_ARN: ${{ secrets.CERTIFICATE_ARN_PROD }}
          CONTAINER_IMAGE: ${{ vars.CONTAINER_IMAGE_PROD }}
          OWNER: ${{ vars.OWNER }}
          PROJECT: ${{ vars.PROJECT }}
          DB_NAME: rems
          DB_USER: rems
          POSTGRES_VERSION: 17.4
          DB_INSTANCE_SIZE: micro
          DB_INSTANCE_CLASS: burstable3
          OIDC_SECRET_ARN: ${{ secrets.OIDC_SECRET_ARN_PROD }}
