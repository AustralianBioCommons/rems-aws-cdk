receivers:
  prometheus:
    config:
      global:
        scrape_interval: 30s
        scrape_timeout: 10s
      scrape_configs:
        - job_name: rems-jvm
          static_configs:
            - targets: ["localhost:9404"]
              labels:
                service: rems
                instance: acdc
                env: prod

  # OPTIONAL: task-level CPU/memory/network
  awsecscontainermetrics:
    collection_interval: 30s

processors:
  batch:
    timeout: 5s
    send_batch_size: 8192
  # OPTIONAL: keep cost/cardinality down for ECS metrics
  filter:
    metrics:
      include:
        match_type: strict
        metric_names:
          - ecs.task.cpu.utilized
          - ecs.task.cpu.reserved
          - ecs.task.memory.utilized
          - ecs.task.memory.reserved
          - ecs.task.network.rate.rx
          - ecs.task.network.rate.tx

extensions:
  health_check: {}
  sigv4auth:
    region: ${env:AWS_REGION}   # ‚Üê set on the collector container
    service: aps

exporters:
  prometheusremotewrite:
    endpoint: https://aps-workspaces.${env:AWS_REGION}.amazonaws.com/workspaces/${env:AMP_WORKSPACE_ID}/api/v1/remote_write
    auth:
      authenticator: sigv4auth
  # OPTIONAL local debug
  # debug:
  #   verbosity: detailed

service:
  extensions: [health_check, sigv4auth]
  telemetry:
    logs:
      level: info
  pipelines:
    metrics:                # JVM (JMX agent)
      receivers: [prometheus]
      processors: [batch]
      exporters: [prometheusremotewrite] #, debug]
    metrics/ecs:            # OPTIONAL ECS task metrics
      receivers: [awsecscontainermetrics]
      processors: [filter, batch]
      exporters: [prometheusremotewrite] #, debug]
